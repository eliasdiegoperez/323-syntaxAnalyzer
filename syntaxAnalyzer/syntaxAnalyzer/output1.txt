
Token: SEPARATOR           Lexeme: $$                  
	<Rat16F> ::= $$ <Opt Function Definitions>
				 $$ <Opt Declaration List> <Statement List> $$

Token: KEYWORD             Lexeme: function            
	<Opt Function Definition> ::= <Function Definitions> | <Empty>
	<Function Definitions> ::= <Function> | <Function> <Function Definitions>
	<Function> ::= function <Identifier> [ <Opt Paramenter List> ] <Opt Declaration List> <Body>

Token: IDENTIFIER          Lexeme: doSomething         

Token: SEPARATOR           Lexeme: [                   

Token: IDENTIFIER          Lexeme: number              
	<Opt Parameter List> ::= <Parameter List> | <Empty>
	<Parameter List> ::= <Parameter> | <Parameter>, <Parameter List>
	<Parameter> ::= <IDs> : <Qualifier>
	<IDs> ::= <Identifier> | <Identifier>, <IDs>

Token: SEPARATOR           Lexeme: :                   

Token: KEYWORD             Lexeme: true                
	<Qualifier> ::= integer | boolean | real

Token: SEPARATOR           Lexeme: ]                   

Token: KEYWORD             Lexeme: real                
	<Opt Declaration List> ::= <Declaration List> | <Empty>
	<Declaration List> ::= <Declaration>; | <Declaration> ; <Declaration List>
	<Declaration> ::= <Qualifier> <IDs>
	<Qualifier> ::= integer | boolean | real

Token: IDENTIFIER          Lexeme: ram                 
	<IDs> ::= <Identifier> | <Identifier>, <IDs>

Token: SEPARATOR           Lexeme: ;                   

Token: SEPARATOR           Lexeme: {                   
	<Body> ::= { <Statement List> }

Token: KEYWORD             Lexeme: read                
	<Statement List> ::= <Statement> | <Statement> <Statement List>
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Write> | <Read> | <While>
	<Read> ::= read (<IDs>);

Token: SEPARATOR           Lexeme: (                   

Token: IDENTIFIER          Lexeme: num1                
	<IDs> ::= <Identifier> | <Identifier>, <IDs>

Token: SEPARATOR           Lexeme: )                   

Token: SEPARATOR           Lexeme: ;                   

Token: KEYWORD             Lexeme: return              
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Write> | <Read> | <While>
	<Return> ::= return; | return <Expression>;

Token: REAL                Lexeme: 109.92              
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> | <Integer> | <Identifier> [<IDs>] | (<Expression>) | <Real> | true | false

Token: OPERATOR            Lexeme: *                   
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: SEPARATOR           Lexeme: (                   
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> | <Integer> | <Identifier> [<IDs>] | (<Expression>) | <Real> | true | false

Token: INTEGER             Lexeme: 1                   
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> | <Integer> | <Identifier> [<IDs>] | (<Expression>) | <Real> | true | false

Token: OPERATOR            Lexeme: +                   
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= epsilon
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: INTEGER             Lexeme: 1                   
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> | <Integer> | <Identifier> [<IDs>] | (<Expression>) | <Real> | true | false

Token: SEPARATOR           Lexeme: )                   
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= epsilon
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= epsilon

Token: OPERATOR            Lexeme: /                   
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>

Token: INTEGER             Lexeme: 9                   
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> | <Integer> | <Identifier> [<IDs>] | (<Expression>) | <Real> | true | false

Token: SEPARATOR           Lexeme: ;                   
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= epsilon
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= epsilon

Token: SEPARATOR           Lexeme: }                   

Token: KEYWORD             Lexeme: function            
	<Function> ::= function <Identifier> [ <Opt Paramenter List> ] <Opt Declaration List> <Body>

Token: IDENTIFIER          Lexeme: doThis              

Token: SEPARATOR           Lexeme: [                   

Token: IDENTIFIER          Lexeme: number              
	<Opt Parameter List> ::= <Parameter List> | <Empty>
	<Parameter List> ::= <Parameter> | <Parameter>, <Parameter List>
	<Parameter> ::= <IDs> : <Qualifier>
	<IDs> ::= <Identifier> | <Identifier>, <IDs>

Token: SEPARATOR           Lexeme: :                   

Token: KEYWORD             Lexeme: false               
	<Qualifier> ::= integer | boolean | real

Token: SEPARATOR           Lexeme: ]                   

Token: SEPARATOR           Lexeme: {                   
	<Opt Declaration List> ::= <Declaration List> | <Empty>
	<Empty> ::= epsilon
	<Body> ::= { <Statement List> }

Token: KEYWORD             Lexeme: print               
	<Statement List> ::= <Statement> | <Statement> <Statement List>
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Write> | <Read> | <While>
	<Write> ::= print (<Expressions>);

Token: SEPARATOR           Lexeme: (                   

Token: INTEGER             Lexeme: 109                 
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> | <Integer> | <Identifier> [<IDs>] | (<Expression>) | <Real> | true | false

Token: OPERATOR            Lexeme: +                   
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= epsilon
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>

Token: IDENTIFIER          Lexeme: num1                
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> | <Integer> | <Identifier> [<IDs>] | (<Expression>) | <Real> | true | false

Token: SEPARATOR           Lexeme: )                   
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= epsilon
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= epsilon

Token: SEPARATOR           Lexeme: ;                   

Token: SEPARATOR           Lexeme: }                   

Token: SEPARATOR           Lexeme: $$                  

Token: KEYWORD             Lexeme: real                
	<Opt Declaration List> ::= <Declaration List> | <Empty>
	<Declaration List> ::= <Declaration>; | <Declaration> ; <Declaration List>
	<Declaration> ::= <Qualifier> <IDs>
	<Qualifier> ::= integer | boolean | real

Token: IDENTIFIER          Lexeme: num1                
	<IDs> ::= <Identifier> | <Identifier>, <IDs>

Token: SEPARATOR           Lexeme: ,                   

Token: IDENTIFIER          Lexeme: num2                
	<IDs> ::= <Identifier> | <Identifier>, <IDs>

Token: SEPARATOR           Lexeme: ;                   

Token: IDENTIFIER          Lexeme: num1                
	<Statement List> ::= <Statement> | <Statement> <Statement List>
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Write> | <Read> | <While>
	<Assign> ::= <Identifier> := <Expression>;

Token: OPERATOR            Lexeme: :=                  

Token: INTEGER             Lexeme: 7                   
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> | <Integer> | <Identifier> [<IDs>] | (<Expression>) | <Real> | true | false

Token: SEPARATOR           Lexeme: ;                   
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= epsilon
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= epsilon

Token: KEYWORD             Lexeme: read                
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Write> | <Read> | <While>
	<Read> ::= read (<IDs>);

Token: SEPARATOR           Lexeme: (                   

Token: IDENTIFIER          Lexeme: num1                
	<IDs> ::= <Identifier> | <Identifier>, <IDs>

Token: SEPARATOR           Lexeme: ,                   

Token: IDENTIFIER          Lexeme: num2                
	<IDs> ::= <Identifier> | <Identifier>, <IDs>

Token: SEPARATOR           Lexeme: )                   

Token: SEPARATOR           Lexeme: ;                   

Token: KEYWORD             Lexeme: if                  
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Write> | <Read> | <While>
	<If> ::= if (<Condition>) <Statement> endif | if (<Condition>) <Statement> else <Statement> endif

Token: SEPARATOR           Lexeme: (                   

Token: IDENTIFIER          Lexeme: num1                
	<Condition> ::= <Expression> <Relop> <Expression>
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> | <Integer> | <Identifier> [<IDs>] | (<Expression>) | <Real> | true | false

Token: OPERATOR            Lexeme: <                   
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= epsilon
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= epsilon
	<Relop> ::= = | /= | > | < | => | <=

Token: IDENTIFIER          Lexeme: num2                
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> | <Integer> | <Identifier> [<IDs>] | (<Expression>) | <Real> | true | false

Token: SEPARATOR           Lexeme: )                   
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= epsilon
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= epsilon

Token: SEPARATOR           Lexeme: {                   
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Write> | <Read> | <While>
	<Compound> ::= {<Statement List>}

Token: KEYWORD             Lexeme: print               
	<Statement List> ::= <Statement> | <Statement> <Statement List>
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Write> | <Read> | <While>
	<Write> ::= print (<Expressions>);

Token: SEPARATOR           Lexeme: (                   

Token: IDENTIFIER          Lexeme: num1                
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> | <Integer> | <Identifier> [<IDs>] | (<Expression>) | <Real> | true | false

Token: SEPARATOR           Lexeme: )                   
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= epsilon
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= epsilon

Token: SEPARATOR           Lexeme: ;                   

Token: KEYWORD             Lexeme: print               
	<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Write> | <Read> | <While>
	<Write> ::= print (<Expressions>);

Token: SEPARATOR           Lexeme: (                   

Token: IDENTIFIER          Lexeme: doSomething         
	<Expression> ::= <Term> <Expression Prime>
	<Term> ::= <Factor> <Term Prime>
	<Factor> ::= - <Primary> | <Primary>
	<Primary> ::= <Identifier> | <Integer> | <Identifier> [<IDs>] | (<Expression>) | <Real> | true | false

Token: SEPARATOR           Lexeme: [                   

Token: IDENTIFIER          Lexeme: num1                
	<IDs> ::= <Identifier> | <Identifier>, <IDs>

Token: SEPARATOR           Lexeme: ,                   

Token: IDENTIFIER          Lexeme: num2                
	<IDs> ::= <Identifier> | <Identifier>, <IDs>

Token: SEPARATOR           Lexeme: ]                   

Token: SEPARATOR           Lexeme: )                   
	<Term Prime> ::= * <Factor> <Term Prime> | / <Factor> <Term Prime> | <Empty>
	<Empty> ::= epsilon
	<Expression Prime> ::= + <Term> <Expression Prime> | - <Term> <Expression Prime> | <Empty>
	<Empty> ::= epsilon

Token: SEPARATOR           Lexeme: ;                   

Token: SEPARATOR           Lexeme: }                   

Token: KEYWORD             Lexeme: endif               

Token: SEPARATOR           Lexeme: $$                  
The End.
